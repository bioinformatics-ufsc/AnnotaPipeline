#############################################
###   AnnotaPipeline CONFIGURATION FILE   ###
#############################################

#   =============================================
#   | Spare your time, read this section first! |
#   =============================================

#   First of all, some software/libs MUST be in your /bin:
#    --------------------------------------
#   | perl    (only if Augustus is used)   |
#   | blastp                               |
#   | rpsblast                             |
#    --------------------------------------

#   Replace each variable of each program according to your analysis
#   All values are set to default
#   Possible values are included between brackets and separated by '/':
#   Example:  [ optionA / optionB / optionC ]

#   IMPORTANT NOTES
#
#   Remove '#' from optional parameters if you have file/parameter
#   Output flags from each program are not listed: they are generic and named after your given basename
#   FLAGS THAT ARE NOT LISTED, HAVE NOT BEEN TESTED: you can *try*, but results are not guaranteed

#   For flags that are not listed, please inform it in a short way, when it's possible.
#   Software usually have 2 ways to pass an argument, with - or --
#   We normally use the first one, because why not?

# ---

[EssentialParameters]

# [path] python version to run scripts
# WARNING: AnnotaPipeline was tested with python3 and python3.6. These are recommended versions.
#          if anything goes wrong, check AnnotaPipeline_Logfile.log for any possible issues with python version.
python_exe = python3

# --- python3 --- libraries required ------
#               argparse                   |
#               Bio                        |
#               configparser               |
#               datetime                   |
#               logging                    |
#               numpy                      |
#               os                         |
#               pandas                     |
#               pathlib                    |
#               re                         |
#               subprocess                 |
#               sys                        |
# -----------------------------------------

organism = 
# Example: Homo sapiens

basename = 
# Example: Hsapiens

# ------------------------- Databases ------------------------

# [path] Swissprot Database
swissprot_path_db = 

# [path] Secondary database [accepted any of EupathDB], NRDB or TremblDB
# Provide just one, left others empty
specific_db_path = 
nr_db_path = 
trembl_db_path = 

# [path] CDD database
cdd = 

# [path] PFAM hmm profile
pfam= 

# ------------------------ Softwares ------------------------

# [path] full path to interproscan.sh [INTERPROSCAN SOFTWARE]
interpro_exe = 

# [path] full path to hmmscan [HMMSCAN SOFTWARE]
hmm_exe = 

# ------------------------ Other stuff ----------------------

# specific keywords to classify each HSP found in BLAST as "annotated" or "hypothetical"
# HSPs containing these specific keywords will be classified as "hypothetical"
# suggested: fragment, hypothetical, partial, uncharacterized, unknown, unspecified
key_words = 

# [int] number of threads to run all programs (default = 8)
threads = 12

# ---

[AUGUSTUS]
# ----------------------------------------------------------------------------------------------------------------
# | If you pass a flag, which by default doesn't have a value, please inform value=flag, like the example below: |
# | goterms = flag                                                                                               |
# ----------------------------------------------------------------------------------------------------------------

augustus_path = 

# [ both / forward / backward ]
strand = 

# [ partial / intronless / complete / atleastone / exactlyone ]
genemodel = 

# based on species within /path/to/augustus/config/species
species = 

# [ on / off ]
protein = 
introns = 
start = 
stop = 
cds = 

# none of the next options have been tested in AnnotaPipeline
# OPTIONAL: when this option is used the prediction consideres hints (extrinsic information) is turned on
# hintsfile = hintsfilename.gff

# OPTIONAL: file contains the list of used sources for the hints and their boni and mali
# extrinsicCfgFile = cfgfilename

# OPTIONAL: [ on / off ] currently works *only* for human, galdieria, toxoplasma and caenorhabditis
# UTR = on

# ---

[SequenceCleaner]

# [int] minimal size for input sequences
minsize_seq = 

# [int] minimal % of unknown nucleotides (N)
clean_pc = 

# ---

[BLAST]

# --------------------------------------------------------------------------
# | Blast will run ONLY with these parameters, any others will be ignored. |
# --------------------------------------------------------------------------

# [float] recommended evalue = 0.00001
evalue = 

# [int] identity threshold to filter BLAST results
identity = 

# [int] positivity threshold to filter BLAST results
positivity = 

# [int] query coverage threshold to filter BLAST results
#       for a more restrict search, use a higher value (default = 30)
coverage = 

# [int] exact number of alignments (recommended = 10)
max_hsps = 

[INTERPROSCAN]

# InterPro runs by default with: [-f GFF3, -t p, -goterms, -iprlookup], these flags are not listed
# ----------------------------------------------------------------------------------------------------------------
# | If you pass a flag, which by default doesn't have a value, please inform value=flag, like the example below: |
# | goterms = flag                                                                                               |
# ----------------------------------------------------------------------------------------------------------------

# [int] Optional minimum nucleotide size
# ms = 3

[HMMSCAN]

# HMMSCAN runs by default with: [--tblout, --noali], these flags are not listed
# ----------------------------------------------------------------------------------------------------------------
# | If you pass a flag, which by default doesn't have a value, please inform value=flag, like the example below: |
# | goterms = flag                                                                                               |
# ----------------------------------------------------------------------------------------------------------------

# Evalue [1e-x]
E = 

# Filter per-domain output based on evalue [1e-x]
domE = 

[RPSBLAST]

# RPSBLAST runs by default with:
# [-outfmt "6 qseqid sseqid sacc bitscore evalue ppos pident qcovs stitle"], these flags are not listed
# ----------------------------------------------------------------------------------------------------------------
# | If you pass a flag, which by default doesn't have a value, please inform value=flag, like the example below: |
# | goterms = flag                                                                                               |
# ----------------------------------------------------------------------------------------------------------------

# [float] Evalue
evalue = 

# [int] Max_hsps
max_hsps = 

[KALLISTO]

# KALLISTO is optional
#   If you want to run kallisto, give full path to kallisto and 
#   both values to RNA-seq data and method to parse

# [path] Full path to kallisto software
kallisto_path = 

# [file(s)] Path to RNA-seq reads (2 files for paired-end data or 1 file for single-end data)
#           EXAMPLE: rnaseq-data = /home/R1.fastq /home/R2.fastq
rnaseq-data = 

# ---------------------------------------------------------------------------------------------------------------
# | WARNING1: flags -l and -s are required for single-end data. If one file was given in rnaseq-data, provide a |
# |           value for these parameters                                                                        |
# | WARNING2: do not fill if you don't want to use this flags with paired end data                              |
# ---------------------------------------------------------------------------------------------------------------

# [float] Estimated average fragment length
l = 

# [float] Estimated standard deviation of fragment length
s = 

# TPM threshold to parse Kallisto output [ median / mean / value] (choose only one)

# [flag] Calculate TPM median from Kallisto abundance file and use this value as cutoff
#        EXAMPLE: median = flag
median = 

# [flag] Calculate TPM mean from Kallisto abundance file and use this value as cutoff
#        EXAMPLE: mean = flag
mean = 

# [float] Use specific TPM value from Kallisto abundance file as cutoff
#         EXAMPLE: value = 297.83
value = 

# [int] Default is 0
bootstrap = 

[COMET]

# COMET is optional
#   If you want to run comet, give full path to comet and percolator
#   otherwise leave empty
# [path] Full path to comet software
comet_bash = 

# [config_file] Configuration file to run commet
# Equivalent to -P flag
# -------------------------------------------------- TIP ---------------------------------------------
# | Type "comet -p" to generate a new params file                                                    |
# | Edit and adapt values according to your samples                                                  |
# | Leave "database_name" empty, this value will be given by the -D flag, after annotation process.  |
# ----------------------------------------------------------------------------------------------------
params = 

# [path] Full path to directory containing mass spectometry files 
mass_files = 

# [extension] Mass spectometry files extension
# WARNING: Provide only one type
# Supported input formats include mzXML, mzML, Thermo raw, mgf, and ms2 variants (cms2, bms2, ms2)
mass_files_ext = 

# ------------------------------ Scan range ------------------------------------
# | WARNING:  first is required if last is given and vice-versa                |
# | WARNING2: last must be higher than first                                   |
# ------------------------------------------------------------------------------
# [int] Specify the first/start scan to search, overriding entry in parameters file
first = 

# [int] Specify the last/end scan to search, overriding entry in parameters file
last = 

[PERCOLATOR]

# PERCOLATOR is required if comet is given
#            otherwise, leave empty
# [path] Full path to percolator software
percolator_bash = 

# ----------------------- PERRCOLATOR PARSER -----------------------------------
# [float] Parse PERCOLATOR output by qvalue (<=)
#  [0-1]
# Default is 0.05
qvalue = 
# ------------------------------------------------------------------------------
